function Square(props) {
  return (
    <button className={"square " + props.isWinning} onClick={props.onClick}>
      {props.value}
    </button>
  );
}

class Board extends React.Component {   
 renderSquare(i) { 
   if(this.props.winnerSquares) {
      console.log(this.props.winnerSquares.includes(i));
   }
  
    return (
      <Square
        key={i}
        value={this.props.squares[i]}
        isWinning= {(this.props.winnerSquares && this.props.winnerSquares.includes(i)) ? 'winner' : ''}
        onClick={() => this.props.onClick(i)}
      />
    );
  }
  createBoard(row, col) {
    const board = [];
    let cellCounter = 0;
    
    for(let i = 0; i < row;  i++) {
      const columns = [];
      for(let j = 0; j < col; j++){
        columns.push(this.renderSquare(cellCounter++));
      }
      board.push(<div key={i} className="board-row">{columns}</div>);
    }
   return board;
  }

 render() {
   return (
     <div>{this.createBoard(3, 3)}</div>
   );  
  }
}


class Game extends React.Component {
   constructor(props) {
    super(props);
    this.state = {
      history: [{
        squares: Array(9).fill(null)
      }],
      stepNumber: 0,
      xIsNext: true,
    };
  }
  
  handleClick(i) {
    const locations = [
      [1, 1],
      [1, 2],
      [1, 3],
      [2, 1],
      [2, 2],
      [2, 3],
      [3, 1],
      [3, 2],
      [3, 3]
    ]
    const history = this.state.history.slice(0, this.state.stepNumber + 1);
    const current = history[history.length - 1];
    const squares = current.squares.slice();
     if (null != calculateWinner(squares).winner || squares[i]) {     
      return;
    }
    squares[i] = this.state.xIsNext ? 'X' : 'O';
    this.setState({
      history: history.concat([{
        squares: squares,
        location: locations[i]
      }]),
      stepNumber: history.length,
      xIsNext: !this.state.xIsNext,
      isDescending: true,
    });
  }
  
  jumpTo(step) {
    this.setState({
      stepNumber: step,
      xIsNext: (step % 2) === 0,
    });
  }
  
  sortMoves() {
    this.setState({
      isDescending: !this.state.isDescending,
    });
  }
 
  render() {
   const history = this.state.history;
   const current = history[this.state.stepNumber];
   const {winner, winnerRow} = calculateWinner(current.squares);
    
   const moves = history.map((step, move) => {
     const desc = move ? 'Go to move #' + move + ' @ ' + history[move].location : 'Go to game start';
     return (
       <li key={move}>
         <button onClick={() => this.jumpTo(move)}>           
           {move == this.state.stepNumber ? <b>{desc}</b> : desc}
         </button>
       </li>
     );
   });
    
   let status;
   if (winner) {
       status = 'Winner: ' + winner;
     } else if (history.length === 10) {
       status = 'Draw';
     } else {
      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');
    }
    
    return (     
      <div className="game">
        <div className="game-board">
          <Board 
             squares={current.squares}
             winnerSquares={winnerRow}
             onClick={(i) => this.handleClick(i)}
            />
        </div>
        <div className="game-info">
          <div className="blink">{status}</div>
          <button 
            className="btn btn-green" 
            onClick={() => this.sortMoves()}>Sort by {this.state.isDescending? <i className="arrow down"></i> : <i className="arrow up"></i> }
          </button>
          <ol>{this.state.isDescending ? moves : moves.reverse()}</ol>
        </div>
      </div>
    );
  }
}

// ========================================

ReactDOM.render(
  <Game />,
  document.getElementById('root')
);

function calculateWinner(squares) {
  let winningLine = null;
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      
      return { winner: squares[a], winnerRow: lines[i]}; 
    }
  }
  return { winner: null, winnerRow: null};
}
